const B2 = require("backblaze-b2");
const fs = require("fs");
const path = require("path");
const { default: axios } = require("axios");
const crypto = require("crypto");

// Kh·ªüi t·∫°o B2 v·ªõi th√¥ng tin x√°c th·ª±c t·ª´ systemConfig
let b2;
let lastAuthTime = 0;
const AUTH_CACHE_DURATION = 20 * 60 * 1000; // 20 ph√∫t cache

// H√†m ƒë·ªÉ kh·ªüi t·∫°o B2 v·ªõi th√¥ng tin x√°c th·ª±c
function initializeB2(config) {
  if (!config || !config.applicationKeyId || !config.applicationKey) {
    throw new Error("Thi·∫øu th√¥ng tin x√°c th·ª±c Backblaze B2");
  }
  b2 = new B2({
    applicationKeyId: config.applicationKeyId,
    applicationKey: config.applicationKey,
  });
  // Reset auth cache khi kh·ªüi t·∫°o l·∫°i
  lastAuthTime = 0;
  return b2;
}

// H√†m ƒë·∫£m b·∫£o authorization token c√≤n hi·ªáu l·ª±c
async function ensureFreshAuth(forceRefresh = false) {
  const now = Date.now();

  if (!b2) {
    throw new Error("B2 ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o");
  }

  // Refresh n·∫øu token qu√° c≈© ho·∫∑c b·∫Øt bu·ªôc refresh
  if (forceRefresh || now - lastAuthTime > AUTH_CACHE_DURATION) {
    try {
      console.log("üîÑ ƒêang l√†m m·ªõi authorization token...");
      const { data: authData } = await b2.authorize();
      lastAuthTime = now;
      return authData;
    } catch (error) {
      console.error("‚ùå L·ªói authorization:", error.message);
      throw error;
    }
  }

  // S·ª≠ d·ª•ng token hi·ªán t·∫°i
  return null;
}

// H√†m retry v·ªõi fresh token
async function retryWithFreshAuth(operation, maxRetries = 2) {
  let lastError;

  for (let attempt = 0; attempt < maxRetries; attempt++) {
    try {
      if (attempt > 0) {
        console.log(`üîÑ Th·ª≠ l·∫°i l·∫ßn ${attempt + 1}/${maxRetries}...`);
        // Force refresh token tr∆∞·ªõc khi retry
        await ensureFreshAuth(true);
      }

      return await operation();
    } catch (error) {
      lastError = error;

      // N·∫øu l√† l·ªói v·ªÅ authorization token v√† c√≤n c√≥ attempt
      if (
        error.message.includes("authorizationToken") ||
        error.message.includes("authorization") ||
        error.response?.status === 401
      ) {
        if (attempt < maxRetries - 1) {
          console.log(`‚ö†Ô∏è L·ªói auth token, s·∫Ω th·ª≠ l·∫°i...`);
          continue;
        }
      }

      // N·∫øu kh√¥ng ph·∫£i l·ªói auth ho·∫∑c h·∫øt attempt th√¨ throw
      throw error;
    }
  }

  throw lastError;
}

async function uploadFile(
  filePath,
  bucketId,
  b2FileName = null,
  folderName = null,
  config = null
) {
  try {
    if (config) {
      initializeB2(config);
    } else if (!b2) {
      throw new Error(
        "B2 ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng cung c·∫•p th√¥ng tin x√°c th·ª±c."
      );
    }

    // ƒê·∫£m b·∫£o c√≥ authorization token h·ª£p l·ªá
    const authData = await ensureFreshAuth();
    const downloadUrl =
      authData?.downloadUrl || (await b2.authorize()).data.downloadUrl;

    if (!fs.existsSync(filePath)) {
      throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${filePath}`);
    }

    const fileStats = fs.statSync(filePath);
    const fileSize = fileStats.size;
    const LARGE_FILE_SIZE = 100 * 1024 * 1024;

    const ext = path.extname(filePath);
    const baseName = b2FileName || path.basename(filePath, ext);
    const uniqueSuffix = `_${Date.now()}${ext}`;
    const finalFileName = baseName + uniqueSuffix;
    const fullFilePath = folderName
      ? `${folderName.replace(/\/$/, "")}/${finalFileName}`
      : finalFileName;

    let result;

    if (fileSize < LARGE_FILE_SIZE) {
      // Upload tr·ª±c ti·∫øp v·ªõi retry logic
      result = await retryWithFreshAuth(async () => {
        const fileBuffer = fs.readFileSync(filePath);

        // L·∫•y upload URL m·ªõi cho m·ªói l·∫ßn upload
        const { data: uploadData } = await b2.getUploadUrl({ bucketId });
        const uploadUrl = uploadData.uploadUrl;
        const uploadAuthToken = uploadData.authorizationToken;

        const contentSha1 = crypto
          .createHash("sha1")
          .update(fileBuffer)
          .digest("hex");

        const { data: res } = await b2.uploadFile({
          uploadUrl,
          uploadAuthToken,
          fileName: fullFilePath,
          data: fileBuffer,
          contentLength: fileBuffer.length,
          contentSha1,
          contentType: "application/octet-stream",
        });

        console.log(`‚úÖ Upload file nh·ªè ho√†n t·∫•t: ${fullFilePath}`);
        return res;
      });
    } else {
      // Upload theo ph·∫ßn (multipart) v·ªõi retry logic
      result = await retryWithFreshAuth(async () => {
        const PART_SIZE = 100 * 1024 * 1024;

        const { data: startRes } = await b2.startLargeFile({
          bucketId,
          fileName: fullFilePath,
          contentType: "application/octet-stream",
        });

        const fileId = startRes.fileId;
        const partSha1Array = [];
        const fd = fs.openSync(filePath, "r");
        let offset = 0;
        let partNumber = 1;

        console.log(
          `üîÑ B·∫Øt ƒë·∫ßu upload file l·ªõn "${fullFilePath}" (size: ${fileSize} bytes)`
        );

        try {
          while (offset < fileSize) {
            const remaining = fileSize - offset;
            const chunkSize = Math.min(PART_SIZE, remaining);
            const buffer = Buffer.alloc(chunkSize);
            fs.readSync(fd, buffer, 0, chunkSize, offset);

            // L·∫•y upload URL m·ªõi cho m·ªói part
            const { data: uploadPartUrlData } = await b2.getUploadPartUrl({
              fileId,
            });

            const sha1 = crypto.createHash("sha1").update(buffer).digest("hex");
            partSha1Array.push(sha1);

            // Upload part v·ªõi retry cho t·ª´ng part
            await retryWithFreshAuth(async () => {
              return await b2.uploadPart({
                partNumber,
                uploadUrl: uploadPartUrlData.uploadUrl,
                uploadAuthToken: uploadPartUrlData.authorizationToken,
                data: buffer,
                contentLength: chunkSize,
                contentSha1: sha1,
              });
            }, 1); // Ch·ªâ retry 1 l·∫ßn cho m·ªói part

            console.log(
              `‚úÖ ƒê√£ upload ph·∫ßn ${partNumber}, size: ${chunkSize} bytes`
            );

            offset += chunkSize;
            partNumber++;
          }

          const { data: finishRes } = await b2.finishLargeFile({
            fileId,
            partSha1Array,
          });

          console.log(`üéâ Upload file l·ªõn ho√†n t·∫•t: ${fullFilePath}`);
          return finishRes;
        } finally {
          fs.closeSync(fd);
        }
      });
    }

    // L·∫•y t√™n bucket v·ªõi retry
    const bucketData = await retryWithFreshAuth(async () => {
      return await listBuckets(config);
    }, 1);

    const bucket = bucketData.find((b) => b.bucketId === bucketId);
    const bucketName = bucket?.bucketName || "";

    // Ch·ªâ encode folderName n·∫øu c√≥, gi·ªØ nguy√™n bucketName v√† fileName
    let encodedFullFilePath = fullFilePath;
    if (folderName) {
      const encodedFolderName = encodeURIComponent(
        folderName.replace(/\/$/, "")
      );
      encodedFullFilePath = `${encodedFolderName}/${finalFileName}`;
    }

    // T·∫°o public URL (friendly URL)
    const publicUrl = `${downloadUrl}/file/${bucketName}/${encodedFullFilePath}`;

    // T·∫°o native URL (API URL) - s·ª≠ d·ª•ng fileId t·ª´ response
    const nativeUrl = `${downloadUrl}/b2api/v1/b2_download_file_by_id?fileId=${result.fileId}`;

    return {
      ...result,
      bucketName,
      publicUrl, // URL th√¢n thi·ªán: https://f003.backblazeb2.com/file/bucketName/fileName
      nativeUrl, // URL native: https://f003.backblazeb2.com/b2api/v1/b2_download_file_by_id?fileId=...
    };
  } catch (error) {
    console.error("‚ùå L·ªói upload file:", error.message);
    throw error;
  }
}

async function listBuckets(config = null) {
  try {
    // N·∫øu c√≥ config ƒë∆∞·ª£c truy·ªÅn v√†o, kh·ªüi t·∫°o l·∫°i B2
    if (config) {
      initializeB2(config);
    } else if (!b2) {
      // N·∫øu b2 ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o v√† kh√¥ng c√≥ config ƒë∆∞·ª£c truy·ªÅn v√†o
      throw new Error(
        "B2 ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng cung c·∫•p th√¥ng tin x√°c th·ª±c."
      );
    }

    // S·ª≠ d·ª•ng retry logic cho listBuckets
    return await retryWithFreshAuth(async () => {
      await ensureFreshAuth();
      const response = await b2.listBuckets();
      return response.data.buckets;
    });
  } catch (error) {
    console.error("L·ªói:", error.message);
    throw error;
  }
}

/**
 * T√¨m t·ªáp d·ª±a tr√™n t√™n ho·∫∑c ƒë∆∞·ªùng d·∫´n v√† tr·∫£ v·ªÅ th√¥ng tin c·ªßa t·ªáp
 * @param {string} fileName - T√™n t·ªáp ho·∫∑c ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß c·∫ßn t√¨m
 * @param {string} bucketId - ID c·ªßa bucket ch·ª©a t·ªáp
 * @param {object} config - Th√¥ng tin c·∫•u h√¨nh Backblaze (t√πy ch·ªçn)
 * @returns {Promise<object|null>} - Th√¥ng tin c·ªßa t·ªáp n·∫øu t√¨m th·∫•y, null n·∫øu kh√¥ng t√¨m th·∫•y
 */
async function findFileByName(fileName, bucketId, config = null) {
  try {
    // N·∫øu c√≥ config ƒë∆∞·ª£c truy·ªÅn v√†o, kh·ªüi t·∫°o l·∫°i B2
    if (config) {
      initializeB2(config);
    } else if (!b2) {
      throw new Error(
        "B2 ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng cung c·∫•p th√¥ng tin x√°c th·ª±c."
      );
    }

    await b2.authorize();

    // L·∫•y t√™n t·ªáp t·ª´ ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß (n·∫øu l√† ƒë∆∞·ªùng d·∫´n)
    const baseFileName = path.basename(fileName);

    // Li·ªát k√™ c√°c t·ªáp trong bucket
    let startFileName = null;
    let files = [];
    let moreFiles = true;

    while (moreFiles) {
      const response = await b2.listFileNames({
        bucketId: bucketId,
        startFileName: startFileName,
        maxFileCount: 1000,
      });

      if (response.data.files.length > 0) {
        files = files.concat(response.data.files);

        if (response.data.nextFileName) {
          startFileName = response.data.nextFileName;
        } else {
          moreFiles = false;
        }
      } else {
        moreFiles = false;
      }
    }

    // T√¨m t·ªáp ph√π h·ª£p
    const foundFile = files.find(
      (file) =>
        file.fileName === fileName ||
        file.fileName === baseFileName ||
        file.fileName.includes(baseFileName)
    );

    if (foundFile) {
      console.log("ƒê√£ t√¨m th·∫•y t·ªáp:", foundFile);
      return foundFile;
    } else {
      console.log(`Kh√¥ng t√¨m th·∫•y t·ªáp c√≥ t√™n '${fileName}' trong bucket`);
      return null;
    }
  } catch (error) {
    console.error("L·ªói khi t√¨m t·ªáp:", error.message);
    throw error;
  }
}

/**
 * X√≥a t·ªáp t·ª´ Backblaze B2
 * @param {string} fileNameOrUrl - T√™n t·ªáp, URL, ho·∫∑c fileId c·∫ßn x√≥a
 * @param {string} bucketId - ID c·ªßa bucket ch·ª©a t·ªáp
 * @param {object} config - Th√¥ng tin c·∫•u h√¨nh Backblaze (t√πy ch·ªçn)
 * @returns {Promise<object>} - K·∫øt qu·∫£ x√≥a t·ªáp
 */
async function deleteFile(fileNameOrUrl, bucketId, config = null) {
  try {
    // N·∫øu c√≥ config ƒë∆∞·ª£c truy·ªÅn v√†o, kh·ªüi t·∫°o l·∫°i B2
    if (config) {
      initializeB2(config);
    } else if (!b2) {
      throw new Error(
        "B2 ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng cung c·∫•p th√¥ng tin x√°c th·ª±c."
      );
    }

    await b2.authorize();

    let fileId = null;
    let fileName = null;

    // Ki·ªÉm tra n·∫øu input l√† URL
    if (fileNameOrUrl.startsWith("http")) {
      try {
        const url = new URL(fileNameOrUrl);

        // Ki·ªÉm tra n·∫øu l√† native URL c√≥ fileId
        if (url.pathname.includes("b2_download_file_by_id")) {
          fileId = url.searchParams.get("fileId");
        } else {
          // N·∫øu l√† friendly URL, tr√≠ch xu·∫•t fileName t·ª´ path
          const pathParts = url.pathname.split("/");

          if (pathParts.length >= 4) {
            const filePathParts = pathParts.slice(3); // L·∫•y t·∫•t c·∫£ ph·∫ßn sau bucketName

            // Decode t·ª´ng ph·∫ßn ri√™ng bi·ªát ƒë·ªÉ x·ª≠ l√Ω ƒë√∫ng k√Ω t·ª± ƒë·∫∑c bi·ªát
            const decodedPathParts = filePathParts.map((part) =>
              decodeURIComponent(part)
            );
            fileName = decodedPathParts.join("/");

            console.log(`üìÅ Extracted fileName from URL: ${fileName}`);
          }
        }
      } catch (urlError) {
        throw new Error(`URL kh√¥ng h·ª£p l·ªá: ${fileNameOrUrl}`);
      }
    } else {
      // N·∫øu kh√¥ng ph·∫£i URL, coi nh∆∞ l√† fileName ho·∫∑c fileId
      if (fileNameOrUrl.length > 40 && fileNameOrUrl.includes("_")) {
        // C√≥ v·∫ª nh∆∞ fileId (format: 4_z...)
        fileId = fileNameOrUrl;
      } else {
        fileName = fileNameOrUrl;
      }
    }

    // N·∫øu ch·ªâ c√≥ fileName, c·∫ßn t√¨m fileId th√¥ng qua listFileNames
    if (!fileId && fileName) {
      console.log(`üîç ƒêang t√¨m fileId cho file: ${fileName}`);

      const listResponse = await b2.listFileNames({
        bucketId: bucketId,
        startFileName: fileName,
        maxFileCount: 100, // TƒÉng s·ªë l∆∞·ª£ng ƒë·ªÉ t√¨m ch√≠nh x√°c h∆°n
      });

      const files = listResponse.data.files;
      const targetFile = files.find((file) => file.fileName === fileName);

      if (!targetFile) {
        // Th·ª≠ t√¨m v·ªõi prefix n·∫øu kh√¥ng t√¨m th·∫•y exact match
        console.log(`üîç Kh√¥ng t√¨m th·∫•y exact match, ƒëang t√¨m v·ªõi prefix...`);
        const prefixMatches = files.filter((file) =>
          file.fileName.includes(fileName)
        );

        if (prefixMatches.length > 0) {
          console.log(
            `üìã T√¨m th·∫•y ${prefixMatches.length} file(s) c√≥ ch·ª©a "${fileName}":`
          );
          prefixMatches.forEach((file) => console.log(`   - ${file.fileName}`));
        }

        throw new Error(`Kh√¥ng t√¨m th·∫•y file: ${fileName}`);
      }

      fileId = targetFile.fileId;
      console.log(`‚úÖ T√¨m th·∫•y fileId: ${fileId}`);
    }

    // N·∫øu c√≥ fileId, l·∫•y th√¥ng tin file ƒë·ªÉ c√≥ fileName
    if (fileId && !fileName) {
      const fileInfo = await b2.getFileInfo({
        fileId: fileId,
      });
      fileName = fileInfo.data.fileName;
    }

    if (!fileId || !fileName) {
      throw new Error("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh fileId ho·∫∑c fileName ƒë·ªÉ x√≥a");
    }

    console.log(`üóëÔ∏è ƒêang x√≥a file: ${fileName} (ID: ${fileId})`);

    const response = await b2.deleteFileVersion({
      fileId: fileId,
      fileName: fileName,
    });

    console.log(`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng: ${fileName}`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå L·ªói khi x√≥a file ${fileNameOrUrl}:`, error.message);
    throw error;
  }
}

/**
 * X√≥a nhi·ªÅu t·ªáp t·ª´ Backblaze B2 (d·ª±a tr√™n URL ho·∫∑c ƒë∆∞·ªùng d·∫´n)
 * @param {Array<string>} fileUrls - M·∫£ng c√°c URL ho·∫∑c ƒë∆∞·ªùng d·∫´n t·ªáp c·∫ßn x√≥a
 * @param {string} bucketId - ID c·ªßa bucket ch·ª©a t·ªáp
 * @param {object} config - Th√¥ng tin c·∫•u h√¨nh Backblaze (t√πy ch·ªçn)
 * @returns {Promise<Array>} - M·∫£ng k·∫øt qu·∫£ x√≥a t·ªáp
 */
async function deleteMultipleFiles(fileUrls, bucketId, config = null) {
  try {
    if (!Array.isArray(fileUrls) || fileUrls.length === 0) {
      throw new Error("Danh s√°ch t·ªáp c·∫ßn x√≥a tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá");
    }

    // Kh·ªüi t·∫°o B2 n·∫øu c·∫ßn
    if (config) {
      initializeB2(config);
    } else if (!b2) {
      throw new Error(
        "B2 ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng cung c·∫•p th√¥ng tin x√°c th·ª±c."
      );
    }

    await b2.authorize();

    const results = [];
    const errors = [];

    console.log(`üóëÔ∏è B·∫Øt ƒë·∫ßu x√≥a ${fileUrls.length} file(s)...`);

    // X·ª≠ l√Ω t·ª´ng URL/ƒë∆∞·ªùng d·∫´n
    for (const fileUrl of fileUrls) {
      try {
        const result = await deleteFile(fileUrl, bucketId);
        results.push({ url: fileUrl, result, success: true });
      } catch (error) {
        console.error(`‚ùå L·ªói khi x√≥a file ${fileUrl}:`, error.message);
        errors.push({ url: fileUrl, error: error.message });
        results.push({ url: fileUrl, error: error.message, success: false });
      }
    }

    // T·ªïng k·∫øt k·∫øt qu·∫£
    const successCount = results.filter((r) => r.success).length;
    console.log(`‚úÖ ƒê√£ x√≥a ${successCount}/${fileUrls.length} file(s)`);

    if (errors.length > 0) {
      console.warn(`‚ö†Ô∏è C√≥ ${errors.length} l·ªói khi x√≥a file:`);
      errors.forEach((err) => console.warn(`   - ${err.url}: ${err.error}`));
    }

    return results;
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a nhi·ªÅu file:", error.message);
    throw error;
  }
}

// H√†m t·∫£i xu·ªëng file t·ª´ URL
async function downloadFile(url, outputPath) {
  try {
    const response = await axios({
      method: "GET",
      url: url,
      responseType: "stream",
    });

    const writer = fs.createWriteStream(outputPath);

    return new Promise((resolve, reject) => {
      response.data.pipe(writer);

      writer.on("finish", () => {
        resolve(outputPath);
      });

      writer.on("error", (err) => {
        console.error(`L·ªói khi t·∫£i xu·ªëng: ${err.message}`);
        reject(err);
      });
    });
  } catch (error) {
    console.error(`L·ªói khi t·∫£i file t·ª´ ${url}: ${error.message}`);
    throw error;
  }
}

module.exports.backblazeAPI = {
  initializeB2,
  uploadFile,
  listBuckets,
  findFileByName,
  deleteFile,
  deleteMultipleFiles,
  downloadFile,
};
