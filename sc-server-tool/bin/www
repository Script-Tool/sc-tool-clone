#!/usr/bin/env node

/**
 * Module dependencies.
 */
require("dotenv").config();
/**
 * Theo dÃµi api
 * https://one.newrelic.com/
 */
if (process.env.ENABLE_NEW_RELIC == "true") {
  console.log("New Relic is enabled for this instance");
  require("newrelic");
} else {
  console.log("New Relic is disabled for this instance");
}

var app = require("../app");
const publicIp = require("public-ip");
var debug = require("debug")("server:server");
var https = require("https");
var http = require("http");
var fs = require("fs");
const getIPAddress = require("../src/utils/getIPAddress");
/**
 * Get port from environment and store in Express.
 */

let paths = __dirname.split("/");
let rootFolderName = paths[paths.length - 2];
var port = normalizePort(process.env.PORT || 3000 || rootFolderName);
app.set("port", port);

/**
 * Create HTTP server.
 */
global.PORT = port;
init();
async function init() {
  let server = {};
  if (process.env.SERVER_TYPE == "customer") {
    let ip = await publicIp.v4();

    let options = {
      cert: fs.readFileSync(`./ssl/certificate.crt`),
      ca: fs.readFileSync(`./ssl/ca_bundle.crt`),
      key: fs.readFileSync(`./ssl/private.key`),
    };

    if (fs.existsSync("./ssl/" + ip)) {
      options = {
        cert: fs.readFileSync(`./ssl/${ip}/certificate.crt`),
        ca: fs.readFileSync(`./ssl/${ip}/ca_bundle.crt`),
        key: fs.readFileSync(`./ssl/${ip}/private.key`),
      };
    }

    server = https.createServer(options, app);
  } else {
    server = http.createServer(app);
  }

  /**
   * Listen on provided port, on all network interfaces.
   */
  const ipAddress = getIPAddress();
  console.log(`Server is running at http://${ipAddress}:${port}`);
  console.log("Running on port :", port);
  server.listen(port, "0.0.0.0");
  server.on("error", onError);
  server.on("listening", () => {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + port;
    debug("Listening on " + bind);
  });
}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}
